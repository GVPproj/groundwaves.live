---
import { sanityClient } from "sanity:client";
import { PortableText } from "astro-portabletext";
import { YouTube } from "astro-embed";
import Layout from "../layouts/Layout.astro";
import SanityImage from "../components/fragments/SanityImage.astro";
import EventCard from "../components/astro/EventCard.astro";
import type { Event, Venue, Artist } from "../../sanity.types";

// The base Event type has venue/headline as reference objects ({ _ref: string, _type: "reference" })
// but our GROQ queries use the -> operator to dereference them into actual Venue/Artist objects.
// This type represents what we actually get at runtime after dereferencing.
type EventWithRefs = Omit<Event, 'venue' | 'headline' | 'slug'> & {
  slug: { current: string };
  venue?: Venue;
  headline?: Artist;
};

const pastEvents = await sanityClient.fetch<EventWithRefs[]>(
  `*[
        _type == "event"
        && date < now()
        ]{_id, name, slug, date, endDate, eventCopy, image, youtubeEmbeds, headline->, venue->}|order(date desc)`,
);
const upcomingEvents = await sanityClient.fetch<EventWithRefs[]>(
  `*[
        _type == "event"
        && date > now()
        ]{_id,  name, date, endDate, eventCopy, image, tickets, youtubeEmbeds, headline->, venue->}|order(date desc)`,
);
---

<Layout title="events">
  <main>
    <section
      class="flex text-center flex-col mx-auto items-center pb-16 max-w-prose w-[100%]"
    >
      {
        upcomingEvents.length > 0 &&
          upcomingEvents.map((event) => {
            return (
              <div class="items-center my-6">
                <a href={event.tickets}>
                  <SanityImage
                    node={event.image}
                    width="800"
                    classNames="mx-auto mb-16"
                  />
                </a>
                {event?.tickets && (
                  <a href={event.tickets} aria-label="Ticket Link">
                    <button
                      type="button"
                      class="cta-button mb-16"
                      value="Get Tickets"
                    >
                      Get Tickets
                    </button>
                  </a>
                )}
                <h2 class="font-semibold text-2xl">{event.name}</h2>
                <h2 class="font-semibold text-2xl mb-12 italic">
                  {event.date && new Date(event.date).toLocaleDateString("en-US", {
                    timeZone: "America/Los_Angeles",
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                  })}{" "}
                  {event.endDate &&
                    "- " +
                      new Date(event.endDate).toLocaleDateString("en-US", {
                        timeZone: "America/Los_Angeles",
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}{" "}
                  @ {event.venue?.name}
                </h2>
                {event.eventCopy && (
                  <div class="text-left prose-base">
                    <PortableText value={event.eventCopy} />
                  </div>
                )}
                {event.youtubeEmbeds &&
                  event.youtubeEmbeds.map((emb: string) => {
                    if (typeof emb !== "string") {
                      console.warn(`Invalid YouTube ID: ${emb}`);
                      return null;
                    }
                    return <YouTube class="w-full mx-auto mt-8" id={emb} />;
                  })}
                {event?.tickets && (
                  <a href={event.tickets} aria-label="Ticket Link">
                    <button
                      type="button"
                      class="cta-button mt-16"
                      value="Get Tickets"
                    >
                      Get Tickets
                    </button>
                  </a>
                )}
              </div>
            );
          })
      }
    </section>
    {
      pastEvents.length > 0 && (
        <section class="pb-16">
          <h1
            class={`font-semibold text-2xl text-skin-accent mb-8 text-center ${upcomingEvents.length > 0 && "mt-16"}`}
          >
            Past Events:
          </h1>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {pastEvents.map((event) => (
              <EventCard event={event} />
            ))}
          </div>
        </section>
      )
    }

    <!-- </div> -->
  </main>
</Layout>
