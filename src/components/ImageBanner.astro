---
import { Image } from "astro:assets";

// Import all images from the afwAssets directory
import afwGeneralPost1 from "../assets/afwAssets/AFW_002_General-Post_1.0.png";
import afwGeneralPost2 from "../assets/afwAssets/AFW_002_General-Post_2.0.png";
import afwManifesto1 from "../assets/afwAssets/AFW_002_Manifesto_1.2.png";
import afwManifesto2 from "../assets/afwAssets/AFW_002_Manifesto_2.1.png";
import afwManifesto3 from "../assets/afwAssets/AFW_002_Manifesto_3.1.png";
import afwProfileAndrew from "../assets/afwAssets/AFW_002_Profile_Andrew-Ross-Collins_1.0.png";
import afwProfileChris from "../assets/afwAssets/AFW_002_Profile_Chris_Arnett_1.0.png";
import afwProfileConnie from "../assets/afwAssets/AFW_002_Profile_Connie-Kuhns_1.0.png";
import afwProfileDavid from "../assets/afwAssets/AFW_002_Profile_David-Wilson_1.0.png";
import afwProfileMatt from "../assets/afwAssets/AFW_002_Profile_Matt-Robertson_1.0.png";
import afwProfileMeredith from "../assets/afwAssets/AFW_002_Profile_Meredith-Bates_1.0.png";
import afwProfileRave from "../assets/afwAssets/AFW_002_Profile_Rave-Coach_1.0.png";

// Create an array of all images
const images = [
  afwProfileMeredith,
  afwGeneralPost1,
  afwProfileMatt,
  afwManifesto1,
  afwProfileConnie,
  afwManifesto2,
  afwProfileChris,
  afwManifesto3,
  afwProfileDavid,
  afwGeneralPost2,
  afwProfileRave,
  afwManifesto1,
  afwProfileAndrew,
];

// Height parameter with default value
const { height = "500px" } = Astro.props;

// Define common image props
const imageWidth = 500;
const format = "webp"; // Changed from formats array to single format
---

<div class="image-banner-container" style={`height: ${height};`}>
  <div class="image-scroll">
    {
      images.map((image, index) => (
        <div class="image-wrapper">
          <Image
            src={image}
            alt={`A Friendly Wave promotional image ${index + 1}`}
            width={imageWidth}
            height={500}
            format={format}
          />
        </div>
      ))
    }
    {/* Duplicate the images to create a seamless loop */}
    {
      images.map((image, index) => (
        <div class="image-wrapper">
          <Image
            src={image}
            alt={`A Friendly Wave promotional image ${index + 1}`}
            width={imageWidth}
            height={500}
            format={format}
          />
        </div>
      ))
    }
  </div>
</div>

<script>
  // This client-side script controls the scrolling behavior
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector(".image-banner-container");
    const scroller = document.querySelector(".image-scroll");
    const imageCount = document.querySelectorAll(".image-wrapper").length / 2; // Divide by 2 because we duplicated images

    // Create a simple animation controller
    let direction = 1; // 1 = right to left, -1 = left to right
    let animationId;
    let position = 0;
    const speed = 0.5; // pixels per frame - slower for better visibility of all images

    // Get the full width of all images (first set only)
    const totalWidth = scroller.scrollWidth / 2;

    // Function to animate the scroll
    function animate() {
      // Move in current direction
      position += speed * direction;

      // Check if we need to change direction
      if (position >= totalWidth) {
        // We've gone too far right, change direction
        position = totalWidth;
        // Add pause before changing direction
        cancelAnimationFrame(animationId);
        setTimeout(() => {
          direction = -1; // Start going left to right
          animationId = requestAnimationFrame(animate);
        }, 2000);
        return;
      } else if (position <= 0 && direction === -1) {
        // We've gone too far left, change direction
        position = 0;
        // Add pause before changing direction
        cancelAnimationFrame(animationId);
        setTimeout(() => {
          direction = 1; // Start going right to left
          animationId = requestAnimationFrame(animate);
        }, 2000);
        return;
      }

      // Apply the new position
      scroller.style.transform = `translateX(${-position}px)`;

      // Schedule the next frame
      animationId = requestAnimationFrame(animate);
    }

    // Start the animation
    animationId = requestAnimationFrame(animate);

    // Pause animation on hover
    container.addEventListener("mouseenter", () => {
      cancelAnimationFrame(animationId);
    });

    // Resume animation on mouseleave
    container.addEventListener("mouseleave", () => {
      animationId = requestAnimationFrame(animate);
    });

    // Reverse direction when clicked
    container.addEventListener("click", () => {
      direction *= -1;
    });
  });
</script>

<style>
  .image-banner-container {
    width: 100%;
    overflow: hidden;
    position: relative;
    margin: 2rem 0;
  }

  .image-scroll {
    display: flex;
    position: absolute;
    width: fit-content;
    font-size: 0; /* Eliminate any whitespace between elements */
    transition: transform 0.1s linear; /* Smooth the animation */
  }

  .image-scroll img {
    height: 500px;
    width: auto;
    object-fit: contain;
    flex-shrink: 0;
    margin: 0; /* Remove margin to ensure images butt directly against each other */
    padding: 0; /* Remove any padding */
    display: block; /* Prevents any inline spacing issues */
  }

  /* Image wrapper to ensure consistent sizing and borders */
  .image-wrapper {
    height: 500px;
    display: inline-block;
    flex-shrink: 0;
    font-size: 0; /* Eliminate whitespace */
  }

  /* Add responsive adjustments */
  @media (max-width: 768px) {
    .image-wrapper {
      height: 350px;
    }

    .image-scroll img {
      height: 450px;
    }
  }
</style>
